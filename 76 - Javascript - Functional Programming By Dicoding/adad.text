

11. .includes()
Memeriksa apakah suatu array berisi elemen tertentu dan mengembalikan true atau false.

Contoh:

javascript
Copy code
const fruits = ['apple', 'banana', 'grape'];
console.log(fruits.includes('banana')); // true


12. .flat()
Menggabungkan array bersarang menjadi satu array tunggal.

Contoh:

javascript
Copy code
const nestedArray = [1, [2, 3], [4, [5]]];
const flattened = nestedArray.flat(2);
console.log(flattened); // [1, 2, 3, 4, 5]

13. .flatMap()
Menggabungkan fungsi map dan flat dalam satu langkah.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3];
const result = numbers.flatMap(num => [num, num * 2]);
console.log(result); // [1, 2, 2, 4, 3, 6]


14. .from()
Digunakan untuk membuat array baru dari objek yang menyerupai array (seperti string atau node list).

Contoh:

javascript
Copy code
const str = 'hello';
const result = Array.from(str);
console.log(result); // ['h', 'e', 'l', 'l', 'o']
Memahami dan menggunakan metode-metode di atas akan sangat membantumu saat bekerja dengan array di JavaScript. Setiap metode memiliki kegunaan yang unik, jadi cobalah untuk mempraktikkannya satu per satu agar lebih familiar!



15. .reverse()
Mengubah urutan elemen dalam array menjadi kebalikannya. Catatan: ini memodifikasi array asli.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3];
numbers.reverse();
console.log(numbers); // [3, 2, 1]








19. .unshift()
Menambahkan satu atau lebih elemen ke awal array. Ini juga memodifikasi array asli.

Contoh:

javascript
Copy code
const numbers = [2, 3];
numbers.unshift(1);
console.log(numbers); // [1, 2, 3]




20. .shift()
Menghapus elemen pertama dari array dan mengembalikannya. Ini juga memodifikasi array asli.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3];
const first = numbers.shift();
console.log(first); // 1
console.log(numbers); // [2, 3]




21. .fill()
Mengisi semua elemen dalam array dengan nilai statis, dari posisi awal hingga akhir (optional). Ini memodifikasi array asli.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3, 4];
numbers.fill(0, 1, 3); // Mengisi dari index ke-1 sampai ke-2
console.log(numbers); // [1, 0, 0, 4]




22. .copyWithin()
Menyalin bagian dari array ke posisi lain di dalam array, tanpa mengubah panjangnya. Ini memodifikasi array asli.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3, 4, 5];
numbers.copyWithin(0, 3); // Menyalin elemen mulai dari indeks 3 ke indeks 0
console.log(numbers); // [4, 5, 3, 4, 5]



23. .findIndex()
Mengembalikan indeks dari elemen pertama yang memenuhi kondisi yang diberikan, atau -1 jika tidak ada elemen yang memenuhi kondisi.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3, 4];
const index = numbers.findIndex(num => num === 3);
console.log(index); // 2

24. .at() (Baru di ES2022)
Mengembalikan elemen array berdasarkan indeks, mendukung indeks negatif untuk menghitung dari akhir array.

Contoh:

javascript
Copy code
const numbers = [1, 2, 3, 4];
console.log(numbers.at(1));  // 2
console.log(numbers.at(-1)); // 4 (elemen terakhir)



26. .entries()
Mengembalikan objek Array Iterator yang berisi pasangan indeks dan elemen dari array.

Contoh:

javascript
Copy code
const numbers = [10, 20, 30];
const iterator = numbers.entries();

for (let [index, value] of iterator) {
  console.log(index, value);
}
// 0 10
// 1 20
// 2 30
27. .keys()
Mengembalikan objek Array Iterator yang berisi semua indeks dari array.

Contoh:

javascript
Copy code
const numbers = [10, 20, 30];
const keys = numbers.keys();

for (let key of keys) {
  console.log(key);
}
// 0
// 1
// 2
28. .values()
Mengembalikan objek Array Iterator yang berisi semua elemen dari array.

Contoh:

javascript
Copy code
const numbers = [10, 20, 30];
const values = numbers.values();

for (let value of values) {
  console.log(value);
}
// 10
// 20
// 30
29. .isArray() (Static Method)
Digunakan untuk memeriksa apakah sebuah objek adalah array.

Contoh:

javascript
Copy code
console.log(Array.isArray([1, 2, 3])); // true
console.log(Array.isArray({})); // false
30. .from() (Static Method)
Mengubah objek yang dapat diiterasi atau mirip array (seperti Set, Map, atau NodeList) menjadi array baru.

Contoh:

javascript
Copy code
const set = new Set([1, 2, 3]);
const arrayFromSet = Array.from(set);
console.log(arrayFromSet); // [1, 2, 3]
31. .of() (Static Method)
Membuat array baru dari argumen yang diberikan.

Contoh:

javascript
Copy code
const array = Array.of(1, 2, 3);
console.log(array); // [1, 2, 3]
32. .reduceRight()
Mirip dengan .reduce(), tetapi mulai dari elemen paling kanan (terakhir) dan mengurangi ke arah kiri (pertama).

Contoh:

javascript
Copy code
const numbers = [1, 2, 3, 4];
const sum = numbers.reduceRight((acc, num) => acc + num, 0);
console.log(sum); // 10
Metode Lain yang Mungkin Relevan:
.sort() dan .reverse() memodifikasi array asli, jadi hati-hati saat bekerja dengan array immutable.
.toLocaleString(): Mengembalikan representasi string dari array, tetapi dapat diformat sesuai dengan pengaturan lokal.
Dengan mengetahui semua metode ini, kamu bisa memilih pendekatan yang paling efisien dan sesuai untuk berbagai tugas manipulasi array. Metode-metode tersebut membuat pemrograman dengan array lebih mudah dan fleksibel!



object.key()
localeCompare()












Dalam pekerjaan, penggunaan .map() atau .forEach() tergantung pada tujuan kita, terutama apakah kita membutuhkan array baru sebagai hasil akhir atau tidak.

Berikut adalah beberapa skenario umum di tempat kerja:

1. Menggunakan .forEach() untuk Tindakan atau Efek Samping
.forEach() sering digunakan saat kita hanya ingin melakukan tindakan pada setiap elemen dalam array tanpa mengubah atau menyimpannya dalam array baru. Misalnya:

Mencetak atau Logging Data: Saat kita hanya perlu mencatat setiap elemen, seperti mencetak data log untuk debugging atau audit.

javascript
Copy code
const salesData = [100, 200, 300, 400];
salesData.forEach((sale) => {
  console.log(`Penjualan: ${sale}`);
});
Mengubah Tampilan UI: Saat kita memiliki daftar elemen HTML yang ingin diperbarui berdasarkan data, seperti memperbarui status tombol berdasarkan array status yang diterima.

javascript
Copy code
const buttons = document.querySelectorAll('.status-button');
const statusArray = [true, false, true];

statusArray.forEach((status, index) => {
  buttons[index].disabled = !status;
});
Mengirim Data: Ketika kita harus mengirim data ke server untuk setiap elemen dalam array, kita bisa menggunakan .forEach() untuk melakukan operasi asinkron atau pemanggilan API per elemen.

javascript
Copy code
const userIds = [1, 2, 3];
userIds.forEach((id) => {
  fetch(`https://api.example.com/users/${id}`)
    .then((response) => response.json())
    .then((data) => console.log(data));
});
2. Menggunakan .map() untuk Memproses Data dan Menghasilkan Array Baru
.map() lebih cocok jika kita perlu memproses data dan menghasilkan array baru sebagai hasilnya. Beberapa contohnya adalah:

Transformasi Data: Mengubah struktur data, seperti mengubah data dari API menjadi format yang lebih sesuai untuk digunakan.

javascript
Copy code
const products = [
  { name: 'Produk A', price: 100 },
  { name: 'Produk B', price: 200 }
];
const productNames = products.map((product) => product.name);
console.log(productNames); // Output: ['Produk A', 'Produk B']
Menambah atau Memodifikasi Data: Jika Anda perlu menambah informasi pada data yang ada, .map() sangat berguna.

javascript
Copy code
const employees = [
  { name: 'Alice', hoursWorked: 40 },
  { name: 'Bob', hoursWorked: 35 }
];
const employeesWithSalary = employees.map((employee) => {
  return {
    ...employee,
    salary: employee.hoursWorked * 20
  };
});
console.log(employeesWithSalary);
// Output: Array dengan objek yang memiliki properti 'salary'
Mempersiapkan Data untuk Ditampilkan: Misalnya, jika kita memiliki data mentah dan perlu mengubahnya untuk menampilkan informasi yang lebih spesifik.

javascript
Copy code
const rawDates = ['2024-10-30', '2024-11-01'];
const formattedDates = rawDates.map((date) => new Date(date).toLocaleDateString());
console.log(formattedDates); // Output: ['30/10/2024', '01/11/2024']
Kesimpulan
Gunakan .forEach() saat Anda hanya perlu melakukan tindakan tanpa membutuhkan array baru.
Gunakan .map() saat Anda perlu menghasilkan array baru dengan data yang sudah dimodifikasi.
Memilih yang tepat akan membantu meningkatkan efisiensi dan menjaga kode agar mudah dibaca serta dipahami.

Tingkat Lebih Sulit: Operasi Asinkron di Setiap Elemen
Pada tingkat ini, .forEach() digunakan untuk memanggil operasi asinkron (seperti fetch data dari API) pada setiap elemen. Dalam konteks ini, .forEach() bisa mengelola proses-proses yang mungkin berjalan bersamaan, tetapi tidak akan menunggu setiap proses selesai, jadi perlu ekstra hati-hati.

javascript
Copy code
const userIds = [1, 2, 3];

userIds.forEach(async (id) => {
  const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);
  const user = await response.json();
  console.log(`Nama User ${id}:`, user.name);
});
Catatan: Karena .forEach() tidak menunggu setiap async selesai, ada kemungkinan hasil cetakan keluar tidak berurutan. Ini tidak masalah untuk proses paralel, tetapi jika kita butuh urutan tertentu, kita bisa gunakan loop lain seperti for...of.